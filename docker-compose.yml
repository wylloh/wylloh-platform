version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: wylloh-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-wylloh2024!}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-wylloh}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - wylloh-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: wylloh-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - wylloh-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # IPFS Node
  ipfs:
    image: ipfs/kubo:latest
    container_name: wylloh-ipfs
    restart: unless-stopped
    ports:
      - "4001:4001"     # P2P port
      - "5001:5001"     # API port
      - "8080:8080"     # Gateway port
    volumes:
      - ipfs_data:/data/ipfs
    networks:
      - wylloh-network
    environment:
      - IPFS_PROFILE=server
    healthcheck:
      test: ["CMD", "ipfs", "id"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Backend
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: wylloh-api
    restart: unless-stopped
    ports:
      - "3001:3001"
    env_file:
      - ./.env.production
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      MONGODB_URI: mongodb://mongodb:27017/${MONGO_DATABASE:-wylloh}
      REDIS_URL: redis://redis:6379
      IPFS_API_URL: http://ipfs:5001
      IPFS_GATEWAY_URL: http://ipfs:8080
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      CORS_ORIGIN: ${CORS_ORIGIN:-https://wylloh.com,https://www.wylloh.com}
      
      # Blockchain Configuration
      ETHEREUM_RPC_URL: ${ETHEREUM_RPC_URL:-https://mainnet.infura.io/v3/your-project-id}
      POLYGON_RPC_URL: ${POLYGON_RPC_URL:-https://polygon-mainnet.infura.io/v3/your-project-id}
      PRIVATE_KEY: ${PRIVATE_KEY}
      
      # External Services
      PINATA_API_KEY: ${PINATA_API_KEY}
      PINATA_SECRET_API_KEY: ${PINATA_SECRET_API_KEY}
      
      # Security
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      ipfs:
        condition: service_healthy
    networks:
      - wylloh-network
    volumes:
      - ./api/uploads:/app/uploads
      - ./api/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Storage Service
  storage:
    build:
      context: ./storage
      dockerfile: Dockerfile
    container_name: wylloh-storage
    restart: unless-stopped
    ports:
      - "3002:3002"
    env_file:
      - ./.env.production
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3002
      IPFS_API_URL: http://ipfs:5001
      IPFS_GATEWAY_URL: http://ipfs:8080
      MONGODB_URI: mongodb://mongodb:27017/${MONGO_DATABASE:-wylloh}
      REDIS_URL: redis://redis:6379
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      ipfs:
        condition: service_healthy
    networks:
      - wylloh-network
    volumes:
      - ./storage/temp:/app/temp
      - ./storage/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Client service - Production React frontend
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: production
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://138.197.232.48:3001}
        REACT_APP_STORAGE_URL: ${REACT_APP_STORAGE_URL:-http://138.197.232.48:3002}
        REACT_APP_IPFS_GATEWAY: ${REACT_APP_IPFS_GATEWAY:-http://138.197.232.48:8080}
        REACT_APP_NETWORK_ID: ${REACT_APP_NETWORK_ID:-1}
        REACT_APP_CHAIN_NAME: ${REACT_APP_CHAIN_NAME:-mainnet}
    container_name: wylloh-client
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
    depends_on:
      - api
      - storage
    networks:
      - wylloh-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: wylloh-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - client
      - api
      - storage
    networks:
      - wylloh-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: wylloh-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - wylloh-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: wylloh-grafana
    restart: unless-stopped
    ports:
      - "3003:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-wylloh2024!}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - wylloh-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  ipfs_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  client_node_modules:
    driver: local

networks:
  wylloh-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 